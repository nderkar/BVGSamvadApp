@using Samvad_App.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@implements IDisposable

@foreach (var p in userList)
{
    <div class="grid-entry fixed-left" style="align-items:center;">
        <a href="/edituser/@p.Id"  title=" Edit "><i class="fa fa-edit" style="color:#11aa11"></i></a>
        &nbsp;&nbsp;
        <a href="/deleteuser/@p.Id"  title=" Delete "><i class="fa fa-trash" style="color:#cc1111"></i></a>
    </div>
    <div class="grid-entry" >
        <a href="/profile/@p.Id" style="text-decoration:none ;color:#2c2c2c">
        <p>@p.FirstName @p.LastName</p>
        <p>@p.Email</p>
        </a>
    </div>
    <div class="grid-entry noleftborder"></div>
}

    
@if (StopLoading)
{
    <!--div id="list-end" class="mt-5 mb-5 p-5">
        <p>End Of Post</p>
    </div-->
}
<div class="grid-entry fixed-left" style="align-items:center;"></div>
<div id="list-end" class="grid-entry">
    <p></p>
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" style="width: 2rem; height: 2rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }


</div>
<div class="grid-entry noleftborder"></div>

@code {
    [Parameter]
    public string searchValue { get; set; }
    [Parameter]
    public string searchField { get; set; }
    [Parameter]
    public bool isSearchOptionChanged { get; set; }
    List<UserModel> userList = new List<UserModel>();
    bool IsLoading { get; set; } = false;
    int PageSize = 50;

    int PageNumber = 0;
    bool StopLoading = false;
    UserSearchModel userSearch = new UserSearchModel();
    protected override async Task OnInitializedAsync()
    {
        PageNumber = 0;
        userSearch = new UserSearchModel()
        {
            SearchField = searchField,
            SearchValue =searchValue
        };
       
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userList = new List<UserModel>();
            await LoadMore();
            await InitJsListenerAsync();
        }
        else if (isSearchOptionChanged)
        {
            PageNumber = 0;
            StopLoading = true;
            userSearch = new UserSearchModel()
                {
                    SearchField = searchField,
                    SearchValue = searchValue
                };
            IsLoading = false;
            isSearchOptionChanged = false;
            userList = new List<UserModel>();
            await LoadMore();
            await InitJsListenerAsync();
        }
    }

    protected async Task InitJsListenerAsync()
    {
        await JsRuntime.InvokeVoidAsync("ScrollList.Init", "list-end", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        try
        {
            if (!IsLoading)
            {
                IsLoading = true;

                StateHasChanged();

                await Task.Delay(1000);

                var responsePosts = await Http.PostAsJsonAsync("api/accounts/allusers/" + PageNumber.ToString() + "/" + PageSize.ToString(), userSearch);
                responsePosts.EnsureSuccessStatusCode();
                List<UserModel> _userList = await responsePosts.Content.ReadFromJsonAsync<List<UserModel>>();
                userList.AddRange(_userList ?? new List<UserModel>());
              
                PageNumber++;

                IsLoading = false;

                StateHasChanged();


                //at the end of pages or results stop loading anymore
                //if (_userList == null)
                //{
                //    await StopListener();
                //}
                if (_userList?.Count < PageSize)
                {
                    await StopListener();
                }
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine("Error 101 :" + ex.Message);
        }
        
    }

    public async Task StopListener()
    {
        StopLoading = true;
        IsLoading = false;
        await JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
        StateHasChanged();
    }


    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
    }
}
