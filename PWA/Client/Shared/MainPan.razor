@using Samvad_App.Shared.Models
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
<!-- ================= Timeline ================= -->
<div class="col-12 col-lg-6 pb-5">
    <div class="d-flex flex-column justify-content-center w-100 mx-auto"
         style="padding-top: 56px; max-width: 680px">
        <!-- Create Post-->
                <CreatePost onPostCreated="RefreshPost" />

        <!-- posts -->
        
        <!-- p 2 -->
                
                <InfiniteScrolling isNewPostCreated="@isNewPostCreated"/>
                
    </div>
</div>


<!--End-->
</Authorized>
</AuthorizeView>

@code {
    UserModel currentUser = new UserModel();

    long isNewPostCreated = 0;

    protected override async Task OnInitializedAsync()
    {
        isNewPostCreated = 0;
        var response = await Http.GetAsync("api/accounts");
        currentUser = await response.Content.ReadFromJsonAsync<UserModel>();

    }
    private async Task RefreshPost(PostModel newPost)
    {
        isNewPostCreated = newPost.postid;
        
        //postList.Add(newPost);
        //orderedList.Append(newPost);

        //postList = new List<PostModel>();
        //var responsePosts = await Http.GetAsync("api/post");
        //responsePosts.EnsureSuccessStatusCode();
        //postList = await responsePosts.Content.ReadFromJsonAsync<List<PostModel>>();
    }

    

    /*
    [Parameter]
    public ItemsProviderRequestDelegate ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loading)
            return;

        _loading = true;
        try
        {
            _loadItemsCts ??= new CancellationTokenSource();

            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                var newItems = await ItemsProvider(new InfiniteScrollingItemsProviderRequest(postList.Count, _loadItemsCts.Token));

                var previousCount = postList.Count;
                postList.AddRange(newItems);

                if (postList.Count == previousCount)
                {
                    _enumerationCompleted = true;
                }
                else
                {
                    await _instance.InvokeVoidAsync("onNewItems");
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == _loadItemsCts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loading = false;
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./infinite-scrolling.js");

            var responsePosts = await Http.GetAsync("api/post/"+ PageNumber.ToString() +"/" +  PageSize.ToString());
            responsePosts.EnsureSuccessStatusCode();
            postList = await responsePosts.Content.ReadFromJsonAsync<List<PostModel>>();

            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel the current load items operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Dispose();
            _loadItemsCts = null;
        }

        // Stop the IntersectionObserver
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _currentComponentReference?.Dispose();
    }
    public sealed class InfiniteScrollingItemsProviderRequest
    {
        public InfiniteScrollingItemsProviderRequest(int startIndex, CancellationToken cancellationToken)
        {
            StartIndex = startIndex;

            CancellationToken = cancellationToken;

            LoadMorePost(startIndex);
        }
        List<PostModel> postList { get; set; }
        public int PageSize = 5;
        public int StartIndex { get; }
        public CancellationToken CancellationToken { get; }
        public async Task  LoadMorePost(int PageNumber)
        {
            HttpClient Http = new HttpClient();
            var responsePosts = await Http.GetAsync("api/post/" + PageNumber.ToString() + "/" + PageSize.ToString());
            responsePosts.EnsureSuccessStatusCode();
            postList = await responsePosts.Content.ReadFromJsonAsync<List<PostModel>>();
        }
        
    }

 
    public delegate Task<IEnumerable<PostModel>> ItemsProviderRequestDelegate(InfiniteScrollingItemsProviderRequest request);
    */
}
