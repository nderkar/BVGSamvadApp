@inject IAuthService AuthService
@inject NavigationManager NavMan
<div class="col-12 col-lg-6 pb-5">
            <div class="d-flex flex-column justify-content-center w-100 mx-auto"
                 style="padding-top: 56px; max-width: 680px">
               
<div class="head m-4">
    <h1></h1>
            <h4>Register with us!</h4>
</div>
@if (ShowErrors)
{
        <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
                    <p>error</p>
        }
        </div>
}
<div class="card login">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="@RegisterModel" OnValidSubmit="@HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group pt-2">
                <label for="firstname">First Name</label>
                <InputText Id="firstname" Class="form-control" @bind-Value="@RegisterModel.FirstName" />
                <ValidationMessage For="@(() => RegisterModel.FirstName)" />
            </div>
            <div class="form-group pt-2">
                <label for="lastname">Last Name</label>
                <InputText Id="lastname" Class="form-control" @bind-Value="@RegisterModel.LastName" />
                <ValidationMessage For="@(() => RegisterModel.LastName)" />
            </div>
            <div class="form-group pt-2">
                <label for="email">User Type : </label>
                <InputRadioGroup Class="form-control" @bind-Value="@RegisterModel.UserRole">
                    @foreach (var option in roleOptions)
                    {
                        if (@option == "User")
                        {
                                    <InputRadio class="p-1" Value="@option" checked="checked"  /> @option 
                        }
                        else
                        {
                                    <InputRadio class="p-1" Value="@option" /> @option
                        }

                    }
                </InputRadioGroup>
            </div>
            <div class="form-group pt-2">
                <label for="lastname">Category</label>
                <InputText Id="category" Class="form-control" @bind-Value="@RegisterModel.Category" />
            </div>
            <div class="form-group pt-2">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="@RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>
            <div class="form-group pt-2">
                <label for="password">Password</label>
                <InputText type="password" Id="password" Class="form-control" @bind-Value="@RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group pt-2">
                <label for="password">Confirm Password</label>
                <InputText type="password" Id="password" Class="form-control" @bind-Value="@RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>            
            <div class="form-group pt-4">
                <button type="submit" class="submit btn-primary">Submit</button>
            </div>
            <div class="form-group pt-2" >
                <a style="font-weight: bold;" href="/userlist">Manage Users</a>
            </div>

        </EditForm>
    </div>
</div>
    </div>
</div>
@code {
    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;
    List<string> roleOptions = new List<string> { "User", "Admin" };

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            NavMan.NavigateTo("/userlist");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }
}